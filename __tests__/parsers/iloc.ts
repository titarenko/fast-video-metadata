import { parse } from "../../src/parsers/iloc";
import { File } from "../../src/file";
import { describe, test, expect } from "@jest/globals";

describe("iloc", () => {
  test("should parse", async () => {
    const buffer = Buffer.from([
      /*0x00, 0x00, 0x03, 0x40, 0x69, 0x6c, 0x6f, 0x63,*/ 0x01, 0x00, 0x00,
      0x00, 0x44, 0x00, 0x00, 0x33, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x54, 0xae, 0x00, 0x00, 0x06, 0x12, 0x00, 0x02, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x5a, 0xc0, 0x00, 0x00, 0x09,
      0xee, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x64,
      0xae, 0x00, 0x00, 0x82, 0x2e, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0xe6, 0xdc, 0x00, 0x00, 0x65, 0x6c, 0x00, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x4c, 0x48, 0x00, 0x00, 0xc8,
      0x47, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x14,
      0x8f, 0x00, 0x00, 0xc9, 0xdc, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x02, 0xde, 0x6b, 0x00, 0x00, 0xeb, 0xf1, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0xca, 0x5c, 0x00, 0x00, 0xce,
      0x48, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x98,
      0xa4, 0x00, 0x00, 0x05, 0x05, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x04, 0x9d, 0xa9, 0x00, 0x00, 0x08, 0x2d, 0x00, 0x0b, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0xa5, 0xd6, 0x00, 0x00, 0xae,
      0x7e, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x54,
      0x54, 0x00, 0x00, 0x96, 0x8c, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x05, 0xea, 0xe0, 0x00, 0x00, 0xc6, 0xad, 0x00, 0x0e, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0xb1, 0x8d, 0x00, 0x00, 0xbf,
      0x64, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x70,
      0xf1, 0x00, 0x00, 0xcf, 0x63, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x08, 0x40, 0x54, 0x00, 0x00, 0xc6, 0x7b, 0x00, 0x11, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x09, 0x06, 0xcf, 0x00, 0x00, 0x04,
      0x90, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x09, 0x0b,
      0x5f, 0x00, 0x00, 0x07, 0x90, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x09, 0x12, 0xef, 0x00, 0x00, 0xb7, 0x3d, 0x00, 0x14, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x09, 0xca, 0x2c, 0x00, 0x00, 0xc4,
      0x88, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x8e,
      0xb4, 0x00, 0x00, 0xd7, 0x50, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x0b, 0x66, 0x04, 0x00, 0x00, 0xd6, 0xe7, 0x00, 0x17, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0c, 0x3c, 0xeb, 0x00, 0x00, 0xed,
      0xaa, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x2a,
      0x95, 0x00, 0x00, 0xc6, 0x45, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x0d, 0xf0, 0xda, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x1a, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0xf5, 0x7a, 0x00, 0x00, 0x08,
      0x04, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0xfd,
      0x7e, 0x00, 0x00, 0x9a, 0xf4, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x0e, 0x98, 0x72, 0x00, 0x00, 0xb9, 0x25, 0x00, 0x1d, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x51, 0x97, 0x00, 0x01, 0x08,
      0xc8, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x5a,
      0x5f, 0x00, 0x01, 0x3e, 0xa0, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x11, 0x98, 0xff, 0x00, 0x00, 0xf7, 0x49, 0x00, 0x20, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x90, 0x48, 0x00, 0x00, 0xbb,
      0xea, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x13, 0x4c,
      0x32, 0x00, 0x00, 0x19, 0x76, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x13, 0x65, 0xa8, 0x00, 0x00, 0x7b, 0x85, 0x00, 0x23, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x13, 0xe1, 0x2d, 0x00, 0x00, 0xe1,
      0x8e, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x14, 0xc2,
      0xbb, 0x00, 0x01, 0x22, 0xc8, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x15, 0xe5, 0x83, 0x00, 0x00, 0xfa, 0x75, 0x00, 0x26, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x16, 0xdf, 0xf8, 0x00, 0x00, 0xe8,
      0xf8, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x17, 0xc8,
      0xf0, 0x00, 0x00, 0xde, 0xe0, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x18, 0xa7, 0xd0, 0x00, 0x00, 0xbb, 0xc8, 0x00, 0x29, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x19, 0x63, 0x98, 0x00, 0x00, 0x87,
      0xb3, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x19, 0xeb,
      0x4b, 0x00, 0x00, 0x88, 0x6a, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x1a, 0x73, 0xb5, 0x00, 0x00, 0xb6, 0xb4, 0x00, 0x2c, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1b, 0x2a, 0x69, 0x00, 0x00, 0xc3,
      0xa7, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1b, 0xee,
      0x10, 0x00, 0x00, 0xd7, 0x69, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x1c, 0xc5, 0x79, 0x00, 0x00, 0xcb, 0x59, 0x00, 0x2f, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x90, 0xd2, 0x00, 0x00, 0xc4,
      0x42, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1e, 0x55,
      0x14, 0x00, 0x00, 0x96, 0xa6, 0x00, 0x31, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x32, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0d, 0x68, 0x00, 0x00, 0x3e,
      0xc8, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4c,
      0x30, 0x00, 0x00, 0x08, 0x7e,
    ]);

    const result = await parse({
      offset: 0,
      type: "iloc",
      size: buffer.length + 8,
      file: {
        async readContent() {
          return buffer;
        },
      } as File,
    });

    expect(result).toMatchObject({
      version: 1,
      flags: 0,

      offsetSize: 4,
      lengthSize: 4,
      indexSize: 0,
    });

    expect(result?.items).toHaveLength(51);

    expect(result?.items[50]).toStrictEqual({
      itemId: 51,
      baseOffset: undefined,
      constructionMethod: 0,
      dataReferenceIndex: 0,
      extents: [{ index: undefined, length: 2174, offset: 19504 }],
    });
  });
});
